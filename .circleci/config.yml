version: 2
jobs:
  build:
    docker:
      - image: circleci/python:3.7.5-node
    resource_class: small
    working_directory: ~/circle-ci
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - dependencies-
      - run:
          name: Install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
      - save_cache:
          paths:
            - ./venv
          key: dependencies-{{ checksum "requirements.txt" }}
  test:
    docker:
      - image: circleci/python:3.7.5-node
    resource_class: small
    working_directory: ~/circle-ci
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - dependencies-
      - run:
          name: Run unit test
          command: |
            . venv/bin/activate
            pytest
  static_analysis:
    docker:
      - image: circleci/python:3.7.5-node
    resource_class: small
    working_directory: ~/circle-ci
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - dependencies-
      - run:
          name: code style and quality check
          command: |
            . venv/bin/activate
            flake8 ./ --exclude=venv
      - run:
          # We want to generate code security report using bandit but we do not want it to fail the pipeline
          name: code security test
          command: |
            . venv/bin/activate
            bandit -r ./  --exclude venv || echo ""
  deploy:
    docker:
      - image: buildpack-deps:trusty
    steps:
      - checkout
      - run:
          name: Deploy Master to Heroku
          command: |
            git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git master

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build
      - test:
          requires:
            - build
      - static_analysis:
          requires:
            - build
      - deploy:
          requires:
            - build
            - test
            - static_analysis
          filters:
            branches:
              only: master

