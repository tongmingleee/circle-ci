version: 2
jobs:
  build:
    docker:
      - image: circleci/python:3.7.5-node
    resource_class: small
    working_directory: ~/circle-ci
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - dependencies-{{ checksum "poetry.lock" }}
            # fallback to using the latest cache if no exact match is found
            - dependencies-
      - run:
          name: Install dependencies
          command: |
            poetry install
      - save_cache:
          key: dependencies-{{ checksum "poetry.lock" }}
          paths:
            - /home/circleci/.cache/pypoetry/virtualenvs
  test:
    docker:
      - image: circleci/python:3.7.5-node
      - image: circleci/postgres:11.5
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
    resource_class: small
    working_directory: ~/circle-ci
    steps:
      - checkout
      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0
      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - restore_cache:
          keys:
            - dependencies-{{ checksum "poetry.lock" }}
            # fallback to using the latest cache if no exact match is found
            - dependencies-
      - run:
          name: Run unit test
          command: |
            poetry run python -m pytest -v
  static_analysis:
    docker:
      - image: circleci/python:3.7.5-node
    resource_class: small
    working_directory: ~/circle-ci
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependencies-{{ checksum "poetry.lock" }}
            # fallback to using the latest cache if no exact match is found
            - dependencies-
      - run:
          name: code style and quality check
          command: |
            poetry run flake8 ./ --exclude=venv
      - run:
          # We want to generate code security report using bandit but we do not want it to fail the pipeline
          name: code security test
          command: |
            poetry run bandit -r ./  --exclude venv || echo ""
workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build
      - test:
          requires:
            - build
      - static_analysis:
          requires:
            - build
